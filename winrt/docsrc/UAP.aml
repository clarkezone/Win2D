<?xml version="1.0"?>
<!--
Copyright (c) Microsoft Corporation. All rights reserved.

Licensed under the MIT License. See LICENSE.txt in the project root for license information.
-->

<topic id="UAP" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <introduction>
      <para>
        As of Win2D version 1.0.0, Win2D can be used to build Universal
        Windows apps using 
        <externalLink>
          <linkText>Visual Studio 2015</linkText>
          <linkUri>http://www.visualstudio.com/en-us/downloads/download-visual-studio-vs.aspx</linkUri>
        </externalLink>.
      </para>
    </introduction>
    
    <section>
      <title>Substituted Types</title>
      <content>
        <para>
          Some types that were previously provided by Win2D are now included as
          part of the Universal Windows Platform.  This allows Win2D to
          interoperate with other Universal Windows Platform APIs.  As an
          application developer you may need to update your application to use
          the updated type names.
        </para>

        <table>
          <title>New Universal Windows Platform types used by Win2D</title>
          <tableHeader>
            <row>
              <entry><para>Win2D for Windows 8.1 / Windows Phone 8.1</para></entry>
              <entry><para>Win2D for Universal Windows Platform</para></entry>
            </row>
          </tableHeader>
          <row>
            <entry><codeEntityReference qualifyHint="true">T:Microsoft.Graphics.Canvas.BitmapSize</codeEntityReference></entry>
            <entry><codeInline>Windows.Graphics.Imaging.BitmapSize</codeInline></entry>
          </row>
          <row>
            <entry><codeEntityReference>N:Microsoft.Graphics.Canvas.DirectX</codeEntityReference>.*</entry>
            <entry><codeInline>Windows.Graphics.DirectX.*</codeInline></entry>
          </row>
          <row>
            <entry><codeEntityReference>N:Microsoft.Graphics.Canvas.DirectX.Direct3D11</codeEntityReference>.*</entry>
            <entry><codeInline>Windows.Graphics.DirectX.Direct3D11.*</codeInline></entry>
          </row>
          <row>
            <entry><codeEntityReference qualifyHint="true">T:Microsoft.Graphics.Canvas.Effects.IGraphicsEffect</codeEntityReference></entry>
            <entry><codeInline>Windows.Graphics.Effects.IGraphicsEffect</codeInline></entry>
          </row>
          <row>
            <entry><codeEntityReference qualifyHint="true">T:Microsoft.Graphics.Canvas.Effects.IGraphicsEffectSource</codeEntityReference></entry>
            <entry><codeInline>Windows.Graphics.Effects.IGraphicsEffectSource</codeInline></entry>
          </row>
          <row>
            <entry><codeEntityReference>N:Microsoft.Graphics.Canvas.Numerics</codeEntityReference>.*</entry>
            <entry><codeInline>Windows.Foundation.Numerics.*</codeInline></entry>
          </row>
        </table>
      </content>
    </section>

    <section>
      <title>Numerics Types</title>
      <content>
        <para>
          The <codeEntityReference> N:System.Numerics </codeEntityReference>
          namespace was previously implemented by the
          Microsoft.Graphics.Canvas.Numerics.dll assembly. For the Universal
          Windows Platform it is implemented by the CLR assembly
          System.Numerics.Vectors.  The CLR assembly is able to provide more
          efficient interop with WinRT APIs.  In addition, the runtime is able
          to perform SIMD optimizations on code using these types.
        </para>

        <para>
          As a general rule, if you code against System.Numerics then the same
          code will build with all flavors of Win2D.
        </para>
      </content>
    </section>

    <section>
      <title>DirectX Types</title>
      <content>
        <para>
          <codeEntityReference>
          T:Microsoft.Graphics.Canvas.DirectX.Direct3D11.IDirect3DSurface
          </codeEntityReference> and <codeEntityReference>
          T:Microsoft.Graphics.Canvas.DirectX.Direct3D11.IDirect3DDevice
          </codeEntityReference> are now built into the Universal Windows Platform.
          This allows other Universal Windows Platform APIs to interoperate with
          Win2D.  For example, the Video Effect example in ExampleGallery uses
          the Win2D and the new media effects API (via IBasicVideoEffect) by
          exchanging IDirect3DDevice and IDirect3DSurface objects.
        </para>
      </content>
    </section>

    <section>
      <title>Effect Interfaces</title>
      <content>
        <para>
          <codeEntityReference>
          T:Microsoft.Graphics.Canvas.Effects.IGraphicsEffect
          </codeEntityReference> and <codeEntityReference>
          T:Microsoft.Graphics.Canvas.Effects.IGraphicsEffectSource
          </codeEntityReference> are now built into the Universal Windows Platform.
          This allows other Universal Windows Platform APIs to interoperate with
          Win2D.  For example, the new <codeInline>Windows.UI.Composition.EffectVisual</codeInline>
          API can use Win2D types such as CompositeEffect or SaturationEffect
          to describe what effect processing should be applied to a composition visual.
        </para>
      </content>
    </section>

  </developerConceptualDocument>
</topic>
